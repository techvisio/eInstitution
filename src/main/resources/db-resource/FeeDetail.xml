<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>


<entry key="getPreviousSemBalance">
    <![CDATA[
select 

sum(cr.amount)-sum(dr.amount)as difference from feetransactioncredit cr join feetransactiondebit dr on cr.File_No=dr.File_No
where cr.Semester  != (select GREATEST(max(cr.semester), max(dr.semester)) from feetransactioncredit cr 
join feetransactiondebit dr on cr.File_No=dr.File_No) and cr.File_No=:File_No group by cr.File_No;
]]>
</entry>

<entry key="getPendingFee">
    <![CDATA[
select sd.File_No,
sd.First_Name,
sd.Last_Name,
sd.Enroll_No,
sd.Father_Name,
sd.Gender,
sd.DOB,
cm.Course,
bm.Branch,
sd.Semester,
sd.Academic_Year,
sd.Updated_On,
balanceAmount.Pending_Fee from (select cr.file_no, sum(cr.amount)-sum(dr.amount) as Pending_Fee from feetransactioncredit cr join feetransactiondebit dr on cr.File_No = dr.File_No) as balanceAmount join studentdetail sd on balanceAmount.file_No=sd.File_No join coursemaster cm ON cm.Id = sd.Course_Id join coursebranchmaster bm ON bm.Id = sd.Branch_Id where balanceAmount.session_id!=sd.session_id and balanceAmount.batch_id!=sd.batch group by sd.File_No having balanceAmount.Pending_Fee > 0 limit :limit;
]]>
</entry>

	<entry key="generateStudentFeeStaging">
    <![CDATA[
      
insert into studentfeestaging (
      File_No,
      Is_Reoccuring,
      Is_Conditional,
      FeeHead_Id,
      Amount,
      Created_By,
      Updated_By,
      Approved,
      Fee_Generated,
      Created_Date,
      Modified_Date
    
)

select sd.File_No ,fd.Fee_Head_Id,fd.Fee_Amount, 
:Created_By, :Created_By ,null,null,  now(), now()  from studentdetail sd join feeDetailmaster fd on sd.Semester=fd.Semester and sd.Course_Id=fd.Course

and sd.Branch_Id=fd.Branch where sd.File_No=:File_No;

    ]]>

	</entry>

	<entry key="upsertStudentFeeStaging">
	 <![CDATA[
      
insert into studentfeestaging (
      File_No,
      Is_Reoccuring,
      Is_Conditional,
      FeeHead_Id,
      Amount,
      Created_By,
      Updated_By,
      Approved,
      Fee_Generated,
      Created_Date,
      Modified_Date
)
select sd.File_No,:Is_Reoccuring,:Is_Conditional,:FeeHead_Id,:Amount, 
:Created_By, :Created_By ,null,null,  now(), now()  from studentdetail sd 
where sd.File_No=:File_No
    
on duplicate key update
	  File_No=:File_No,
 	  Is_Conditional=:Is_Conditional,	
      Is_Reoccuring=:Is_Reoccuring,
      FeeHead_Id=:FeeHead_Id,
      Amount=:Amount,
      Updated_By=:Updated_By,
      Approved=:Approved,
      Fee_Generated=:Fee_Generated,
      Modified_Date=now()
   
    ]]>

	</entry>
	

	<entry key="getStudentFeeStaging">
    <![CDATA[
select 
     
      File_No,
      Is_Reoccuring,
      Is_Conditional,
      FeeHead_Id,
      Amount,
      Created_By,
      Updated_By,
      Approved,
      Fee_Generated,
      Created_Date,
      Modified_Date

FROM studentfeestaging where File_No=:File_No and FeeHead_Id=ifNull(:FeeHead_Id,FeeHead_Id);
]]>

	</entry>

	<entry key="deleteStudentFeeStaging">
    <![CDATA[
      
Delete from studentfeestaging where File_No=:File_No and FeeHead_Id not in (:FeeHead_Id);
    ]]>

	</entry>

<entry key="deleteStudentFeeStagingByFileNo">
    <![CDATA[
      
Delete from studentfeestaging where File_No=:File_No and FeeHead_Id=:FeeHead_Id;
    ]]>

	</entry>


	<entry key="getFeeDetailMaster">
    <![CDATA[
SELECT 
	COURSE,
	BRANCH,
	FEE_HEAD_ID,
	FEE_AMOUNT,
	Centre_Id,
	Shift_Id,
	Session_Id
	 
FROM feedetailmaster where COURSE=:COURSE AND BRANCH=:BRANCH AND Session_Id=:SESSION_ID AND Shift_Id=:SHIFT_ID AND Centre_Id=:CENTRE_ID;]]>

	</entry>

	<entry key="addFeeDetailMaster">
    <![CDATA[
      
Insert into feedetailmaster

	(COURSE,
	BRANCH,
	FEE_HEAD_ID,
	FEE_AMOUNT,
	Centre_Id,
	Shift_Id,
	Session_Id 
	) values
	       
   (:COURSE,
	:BRANCH,
	:FEE_HEAD_ID,
	:FEE_AMOUNT,
	:Centre_Id,
	:Shift_Id,
	:Session_Id)
    ]]>

	</entry>

	<entry key="updateFeeDetailMaster">
    <![CDATA[
      
Update feedetailmaster set
 
	COURSE=:COURSE,
	BRANCH=:BRANCH,
	FEE_HEAD_ID=:FEE_HEAD_ID,
	FEE_AMOUNT=:FEE_AMOUNT,
	Centre_Id=:Centre_Id,
	Shift_Id=:Shift_Id,
	Session_Id=:Session_Id 
	       
   
where COURSE=:COURSE AND BRANCH=:BRANCH AND FEE_HEAD_ID=:FEE_HEAD_ID ;
    ]]>

	</entry>

	<entry key="deleteFeeDetailMaster">
    <![CDATA[
      
Delete from feedetailmaster where COURSE=:COURSE AND BRANCH=:BRANCH AND FEE_HEAD_ID=:FEE_HEAD_ID ;
    ]]>

	</entry>



	<entry key="getFeeTransactionDebit">
    <![CDATA[
SELECT 
	
	ftd.File_No,
    ftd.Batch_Id,
    ftd.Session_Id, 
	ftd.Component_Id, 
	ftd.User,
	ftd.Created_Date,
	ftd.Remark,
	ftd.Mode,
    ftd.Amount
    	
 from feetransactiondebit ftd join studentDetail sd on sd.session_id=ftd.session_id and sd.batch_id=ftd.batch_id where ftd.file_no=:File_No;
]]>

	</entry>

	<entry key="addFeeTransactionDebit">
    <![CDATA[
      
Insert into feetransactionDebit

	(File_No,
	Batch_Id,
	Session_Id, 
	Component_Id, 
	User, 
	Created_Date,
	Remark,
	Mode,
	Amount) values
	       
   (  
    :File_No,
	:Batch_Id,
	:Session_Id, 
	:Component_Id, 
	:User, 
	 now(),
	:Remark,
	:Mode,
	:Amount )
	
	on duplicate key update
	
	File_No=:File_No,
	Batch_Id=:Batch_Id,
	Session_Id=:Session_Id, 
	Component_Id=:Component_Id, 
	User=:User, 
	Created_Date=now(),
	Remark=:Remark,
	Mode=:Mode,
	Amount=:Amount;
	
    ]]>

	</entry>

	<entry key="getFeeTransactionCredit">
    <![CDATA[
	
	SELECT 
	
	ftc.File_No,
	ftc.Batch_Id,
	ftc.Session_Id, 
	ftc.Component_Id, 
	ftc.User,
	ftc.Created_Date,
	ftc.Remark,
	ftc.Mode,
	ftc.Amount
	
from feetransactionCredit ftc join studentDetail sd on sd.session_id=ftc.session_id and sd.batch_id=ftc.batch_id where ftc.file_no=:File_No;
]]>

	</entry>

	<entry key="addFeeTransactionCredit">
    <![CDATA[
      
Insert into feetransactionCredit

	(File_No,
	Batch_Id,
	Session_Id, 
	Component_Id, 
	User, 
	Created_Date,
	Remark,
	Mode,
	Amount) values
	       
   (  
    :File_No,
	:Batch_Id, 
	:Session_Id,
	:Component_Id, 
	:User, 
	now(),
	:Remark,
	:Mode,
	:Amount )
    ]]>

	</entry>




	<entry key="getFeeDiscountHead">
    <![CDATA[
 
 Select 
 
   Head_Id,
   Head,
   Transaction_Type,
   Parent_Type_Id,
   isReoccurring,
   Refund_Type

from feeDiscountHeadmaster where Head_Id=:Head_Id ;
]]>
	</entry>

	<entry key="addFeeDiscountHead">
    <![CDATA[
 
 Insert into feeDiscountHeadmaster 
 
   (Head_Id,
   Head,
   Transaction_Type,
   Parent_Type_Id,
   isReoccurring,
   Refund_Type) values
   
   (:Head_Id,
    :Head,
    :Transaction_Type,
    :Parent_Type_Id,
    :isReoccurring,
    :Refund_Type);

]]>
	</entry>

	<entry key="updateFeeDiscountHead">
    <![CDATA[
 
 Update feeDiscountHeadmaster set
 
   Head_Id=:Head_Id,
   Head=:Head,
   Transaction_Type=:Transaction_Type,
   Parent_Type_Id=:Parent_Type_Id,
   isReoccurring=:isReoccurring,
   Refund_Type=:Refund_Type
   
   where Head_Id=:Head_Id;

]]>
	</entry>

	<entry key="deleteFeeDiscountHead">
    <![CDATA[
 
 Delete from feeDiscountHeadmaster where Head_Id=:Head_Id;

]]>
	</entry>

	<entry key="getPreviousManagementStatus">
    <![CDATA[
 
 select management_approval from studentdetail where file_no=:File_No;

]]>
	</entry>


</properties>
