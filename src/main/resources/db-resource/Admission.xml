<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>

<entry key="getStudentDtlDynamically">
    <![CDATA[
SELECT
s.Registration_No,
s.File_No,
s.Enroll_No,
s.Uni_Enroll_No,
s.First_Name,
s.Last_Name,
s.Father_Name,
s.Gender,
s.DOB,
s.Email_Id,
s.Category_Id,
s.Course_Id,
s.Branch_Id,
s.Created_On,
s.Updated_On,   
s.Quota_Code,
s.Academic_Year,
s.Semester,
s.Lateral,
s.Batch_Id,
s.Session_Id
from  studentdetail s  WHERE s.Registration_No=IFNULL(:Registration_No,s.Registration_No) and ifnull(Email_Id,'-1')=ifnull(:Email_Id,ifnull(Email_Id,'-1')) and ifnull(Enroll_No,'-1')=ifnull(:Enroll_No,ifnull(Enroll_No,'-1')) and ifnull(Uni_Enroll_No,'-1')=ifnull(:Uni_Enroll_No,ifnull(Uni_Enroll_No,'-1')) and ifnull(Self_Mobile_No,'-1') = ifnull(:Self_Mobile_No,ifnull(Self_Mobile_No,'-1')) and First_Name like :First_Name;    
    ]]>

	</entry>

<entry key="getStudentBasicInfoByFileNo">
    <![CDATA[
Select
sd.registration_No,
sd.File_No,
sd.First_Name,
sd.Last_Name,
sd.Enroll_No,
sd.Father_Name,
sd.Gender,
sd.DOB,
sd.Course_id,
sd.Branch_id,
sd.Semester,
sd.Academic_Year,
sd.Updated_On,
sd.Category_Id,
sd.Batch_Id,
sd.Session_Id
from StudentDetail sd  where File_No=:File_No;
 ]]>
</entry>

<entry key="getAdmissionBasicInfo">
    <![CDATA[
select * from (select registration_No, File_No,
First_Name,
Last_Name,
Enroll_No,
Father_Name,
Gender,
DOB,
Course_Id,
Branch_Id,
Semester,
Academic_Year,
Category_Id
Updated_On from StudentDetail order by Updated_On desc) as Admissionbasicinfo limit :limit; ]]>
</entry>

<entry key="getUnapprovedAdmissions">
    <![CDATA[
select * from (select registration_No, File_No,
First_Name,
Last_Name,
Enroll_No,
Father_Name,
Gender,
DOB,
Course_Id,
Branch_Id,
Semester,
Academic_Year,
Updated_On,
Category_Id from StudentDetail where Management_Approval != 1 order by Updated_On desc) as Admissionbasicinfo limit :limit; ]]>
</entry>

<entry key="getStudentDtlByFileNo">
    <![CDATA[
SELECT
s.registration_No,
s.File_No,
s.Enroll_No,
s.Uni_Enroll_No,
s.Photo,
s.First_Name,
s.Last_Name,
s.Father_Name,
s.Mother_Name,
s.Gender,
s.DOB,
s.Blood_Group,
s.Father_Occupation,
s.FixedLine_No,
s.Self_Mobile_No,
s.Parent_Mobile_No,
s.Gaurdian_Mobile_No,
s.Email_Id,
s.Gaurdian_Email_Id,
case WHEN h.Type_Code is null 
  THEN 0 
  ELSE 1
END
 AS Hostel,
case  
WHEN t.Route_Code is null 
THEN 0 
ELSE 1
end 
 AS Transportation,
s.Academic_Year,
s.Semester,
s.Management_Approval,
s.Fee_Paid,
s.Category_Id,
s.Course_Id,
s.Branch_Id,
s.Created_By,
s.Created_On,
s.Updated_By,
s.Updated_On,   
s.Admission_Mode,
s.Referred_By,
s.Quota_Code,
s.Lateral,
s.Remarks,
s.Application_Status,
s.Section_Id,
s.Shift_Id,
s.Centre_Id,
s.Batch_Id,
s.Session_Id

from  studentdetail s left join transportreservation t on (s.File_No = t.File_No) left join hostelreservation h on (s.File_No = h.File_No)  where s.File_No=:File_No;    
  ]]>

</entry>

<entry key="addStudentDtl">
    <![CDATA[
      
Insert into StudentDetail
(Registration_No,
File_No,
Enroll_No,
Uni_Enroll_No,
Photo,
First_Name,
Last_Name,
Father_Name,
Mother_Name,
Gender,
DOB,
Blood_Group,
Father_Occupation,
FixedLine_No,
Self_Mobile_No,
Parent_Mobile_No,
Gaurdian_Mobile_No,
Email_Id,
Gaurdian_Email_Id,
Hostel,
Transportation,
Academic_Year,
Semester,
Management_Approval,
Fee_Paid,
Category_Id,
Course_Id,
Branch_Id,
Created_By,
Created_On,
Updated_By,
Updated_On,
Admission_Mode,
Referred_By,
Quota_Code,
Lateral,
Remarks,
Application_Status,
Shift_Id,
Centre_Id,
Batch_Id,
Session_Id

) values
    
 (:Registration_No,
 :File_No,
 :Enroll_No,
:Uni_Enroll_No,
:Photo,
:First_Name,
:Last_Name,
:Father_Name,
:Mother_Name,
:Gender,
:DOB,
:Blood_Group,
:Father_Occupation,
:FixedLine_No,
:Self_Mobile_No,
:Parent_Mobile_No,
:Gaurdian_Mobile_No,
:Email_Id,
:Gaurdian_Email_Id,
:Hostel,
:Transportation,
:Academic_Year,
:Semester,
:Management_Approval,
:Fee_Paid,
:Category_Id,
:Course_Id,
:Branch_Id,
:Created_By,
now(),
:Updated_By,
now(),
:Admission_Mode,
:Referred_By,
:Quota_Code,
:Lateral,
:Remarks,
:Application_Status,
:Shift_Id,
:Centre_Id,
:Batch_Id,
:Session_Id
);
       
    ]]>

</entry>

<entry key="updateStudentDtl">
    <![CDATA[
      
Update StudentDetail set
Enroll_No = :Enroll_No,
Uni_Enroll_No = :Uni_Enroll_No,
Photo = :Photo,
First_Name = :First_Name,
Last_Name = :Last_Name,
Father_Name = :Father_Name,
Mother_Name = :Mother_Name,
Gender = :Gender,
DOB = :DOB,
Blood_Group = :Blood_Group,
Father_Occupation = :Father_Occupation,
FixedLine_No = :FixedLine_No,
Self_Mobile_No = :Self_Mobile_No,
Parent_Mobile_No = :Parent_Mobile_No,
Gaurdian_Mobile_No = :Gaurdian_Mobile_No,
Email_Id = :Email_Id,
Gaurdian_Email_Id = :Gaurdian_Email_Id,
Hostel = :Hostel,
Transportation = :Transportation,
Academic_Year = :Academic_Year,
Semester = :Semester,
Management_Approval = :Management_Approval,
Fee_Paid = :Fee_Paid,
Category_Id = :Category_Id,
Course_Id = :Course_Id,
Branch_Id = :Branch_Id,
Created_By = :Created_By,
Created_On = now(),
Updated_By = :Updated_By,
Updated_On = now(),
Admission_Mode = :Admission_Mode,
Referred_By = :Referred_By,
Quota_Code = :Quota_Code,
Lateral = :Lateral,
Remarks = :Remarks,
Application_Status = :Application_Status,
Shift_Id=:Shift_Id,
Centre_Id=:Centre_Id,
Batch_Id=:Batch_Id,
Session_Id=:Session_Id

  
 where File_No=:File_No;  
    ]]>

</entry>

<entry key="deleteStudentDtl">
    <![CDATA[
      
Delete from StudentDetail where File_No=:File_No; 
    ]]>

</entry>

<entry key="getAcademicDtlByFileNo">
    <![CDATA[
Select 
University,
College_Name,
Passing_Year,
Percentage,
Roll_No,
File_No,
Qualification_Id    
from  AcademicDetail where File_No=:File_No;    
    
    ]]>

</entry>

<entry key="upsertAcademicDtl">
    <![CDATA[
      
Insert into AcademicDetail
(File_No,
Qualification_Id,
University,
College_Name,
Passing_Year,
Percentage,
Roll_No) values
    
    
(:File_No,
:Qualification_Id,
:University,
:College_Name,
:Passing_Year,
:Percentage,
:Roll_No)
on duplicate key update
 
 File_No=:File_No,
 Qualification_Id=:Qualification_Id,
 University=:University, 
 College_Name=:College_Name, 
 Passing_Year=Passing_Year, 
 Percentage=:Percentage, 
 Roll_No=:Roll_No;
 
    ]]>

</entry>

	
<entry key="deleteAcademicDtl">
    <![CDATA[
      
Delete from AcademicDetail where File_No=:File_No and Qualification_Id not in (:Qualification_Id);  
    ]]>

</entry>

<entry key="getAddressDtlByFileNo">
    <![CDATA[
      
Select
House_No,
Locality,
Landmark,
District,
City,
Pincode,
File_No,
Address_Type,
State_Id
from AddressDetail where File_No=:File_No;    
    ]]>

</entry>

<entry key="upsertAddressDtl">
    <![CDATA[
      
Insert into AddressDetail
(File_No,
Address_Type,
House_No, 
Locality, 
Landmark, 
District, 
City, 
Pincode,
State_Id) values    
(:File_No,
:Address_Type,
:House_No,
:Locality,
:Landmark,
:District,
:City,
:Pincode,
:State_Id)
on duplicate key update
File_No=:File_No,
Address_Type=:Address_Type,
House_No=:House_No, 
Locality=:Locality, 
Landmark=:Landmark, 
District=:District, 
City=:City, 
Pincode=:Pincode,
State_Id=:State_Id
   
    ]]>

</entry>

<entry key="deleteAddressDtl">
    <![CDATA[
      
Delete from AddressDetail where File_No=:File_No and Address_Type not in(:Address_Type);  
    ]]>

</entry>

<entry key="getAdmissionDisDtlByFileNo">
    <![CDATA[
      
Select  
File_No,
FeeHead_Id,
Amount,
Percent,
Discount_Type
    
from  AdmissionDiscountDtl where File_No=:File_No;    
    ]]>

</entry>

<entry key="upsertAdmissionDisDtl">
    <![CDATA[
      
Insert into AdmissionDiscountDtl
(File_No,
FeeHead_Id,
Amount,
Percent,
Discount_Type) values 
(:File_No,
:FeeHead_Id,
:Amount,
:Percent,
:Discount_Type)
on duplicate key update
File_No=:File_No,
FeeHead_Id=:FeeHead_Id,
Amount=:Amount,
Percent=:Percent,
Discount_Type=:Discount_Type 
    
    ]]>

</entry>

<entry key="deleteAdmissionDisDtl">
    <![CDATA[
      
Delete from AdmissionDiscountDtl where File_No=:File_No and FeeHead_Id not in (:FeeHead_Id);  
    ]]>

</entry>

<entry key="getQualificationSubjectDtlByFileNo">
    <![CDATA[
 
Select      
	Subject_Id, 
	File_No, 
	Qualification_Id, 
	Marks_Obtained, 
	Max_Marks  
    
from QualificationSubjectDtl where File_No=:File_No; 
    ]]>

</entry>

<entry key="upsertQualificationSubjectDtl">
    <![CDATA[
      
Insert into QualificationSubjectDtl
    (Subject_Id, 
	File_No, 
    Qualification_Id, 
	Marks_Obtained, 
	Max_Marks) values 
   
   (:Subject_Id, 
	:File_No, 
   :Qualification_Id, 
	:Marks_Obtained, 
	:Max_Marks)
	
	on duplicate key update
	
	Subject_Id=:Subject_Id, 
	File_No=:File_No,
	Qualification_Id=:Qualification_Id, 
	Marks_Obtained=:Marks_Obtained, 
	Max_Marks=:Max_Marks; 
    
    ]]>

</entry>

	
<entry key="deleteQualificationSubjectDtl">
    <![CDATA[
      
Delete from QualificationSubjectDtl where File_No=:File_No and Subject_Id not in (:Subject_Id); 
    ]]>

</entry>

<entry key="getBranchPreferenceByFileNo">
    <![CDATA[
      
Select
	Branch_Preference_Id,
	File_No,
	Branch_Id 
	
	from BranchPreference where File_No=:File_No;
    ]]>

</entry>

<entry key="upsertBranchPreference">
    <![CDATA[
      
      Insert into BranchPreference
	(Branch_Preference_Id,
	File_No,
	Branch_Id) values
	 
	 (:Branch_Preference_Id,
	:File_No,
	:Branch_Id)
	
	on duplicate key update 
    
    Branch_Preference_Id=:Branch_Preference_Id,
	File_No=:File_No,
	Branch_Id=:Branch_Id;
	
    ]]>

</entry>

	
<entry key="deleteBranchPreference">
    <![CDATA[
      
      Delete from BranchPreference where File_No=:File_No and Branch_Preference_Id not in (:Branch_Preference_Id); 
	 
	     ]]>
</entry>
	
<entry key="getcounsellingDetailByFileNo">
    <![CDATA[
select 
      
      File_No, 
      Counselling_Id, 
      Roll_No, 
      Rank, 
      Category_Rank, 
      Percentile
      
from counsellingDetail where File_No=:File_No;
    ]]>

</entry>
	
<entry key="upsertCounsellingDetail">
    <![CDATA[
insert into counsellingDetail
      
      (File_No, 
      Counselling_Id, 
      Roll_No, 
      Rank, 
      Category_Rank, 
      Percentile) values
      
      (:File_No, 
       :Counselling_Id, 
       :Roll_No, 
       :Rank, 
       :Category_Rank, 
       :Percentile)
       
       on duplicate key update
       
       File_No=:File_No, 
       Counselling_Id=:Counselling_Id, 
       Roll_No=:Roll_No, 
       Rank=:Rank, 
       Category_Rank=:Category_Rank, 
       Percentile=:Percentile;
       
    ]]>

</entry>
	
<entry key="deleteCounsellingDetail">
    <![CDATA[
delete from counsellingDetail where File_No=:File_No and Counselling_Id not in (:Counselling_Id);
    ]]>

</entry>

<entry key="getRemark">
    <![CDATA[
select 

Enquiry_Remark, 
Enquiry_Remark_Date,
Fee_Remark,
Fee_Remark_Date, 
Management_Remark,
Management_Remark_Date

from Remark;
    ]]>

</entry>	

<entry key="upsertRemark">
    <![CDATA[
insert into Remark
      
      (Enquiry_Remark, 
       Enquiry_Remark_Date,
       Fee_Remark,
       Fee_Remark_Date, 
       Management_Remark,
       Management_Remark_Date) values
      
      (:Enquiry_Remark, 
       :Enquiry_Remark_Date,
       :Fee_Remark,
       :Fee_Remark_Date, 
       :Management_Remark,
       :Management_Remark_Date)
       
       on duplicate key update
       
       Enquiry_Remark=:Enquiry_Remark,
       Enquiry_Remark_Date=:Enquiry_Remark_Date,
       Fee_Remark=:Fee_Remark,
       Fee_Remark_Date=:Fee_Remark_Date, 
       Management_Remark=:Management_Remark,
       Management_Remark_Date=:Management_Remark_Date

    ]]>

</entry>	
</properties>
