<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>

<entry key="getStudentDtlDynamically">
    <![CDATA[
Select
File_No,
Enroll_No,
Uni_Enroll_No,
Photo,
First_Name,
Last_Name,
Father_Name,
Mother_Name,
Gender,
DOB,
Blood_Group,
Father_Occupation,
FixedLine_No,
Self_Mobile_No,
Parent_Mobile_No,
Gaurdian_Mobile_No,
Email_Id,
Gaurdian_Email_Id,
Hostel,
Transportation,
Academic_Year,
Semester,
Management_Approval,
Fee_Paid,
Category_Id,
Course_Id,
Branch_Id,
Created_By,
Created_On,
Updated_By,
Updated_On,   
Domicile_State_Id,
Scholarship,
Remarks,
Admission_Mode,
Referred_By,
Quota_Code
from StudentDetail WHERE File_No=IFNULL(:File_No,File_No) and Email_Id=ifnull(:Email_Id,Email_Id) and Enroll_No=ifnull(:Enroll_No,Enroll_No) and Uni_Enroll_No=ifnull(:Uni_Enroll_No,Uni_Enroll_No) and Self_Mobile_No = ifnull(:Self_Mobile_No,Self_Mobile_No);    
    ]]>

	</entry>

<entry key="getStudentBasicInfoByFileNo">
    <![CDATA[
Select
File_No,
Enroll_No,
Father_Name,
Gender,
DOB,
Course,
Branch,
Semester,
Academic_Year,
Updated_On
from StudentDetail join coursemaster ON coursemaster.Id = studentdetail.Course_Id join coursebranchmaster ON coursebranchmaster.Id = studentdetail.Branch_Id where File_No=:File_No;
 ]]>
</entry>

<entry key="getAdmissionBasicInfo">
    <![CDATA[

select * from (select File_No,
Enroll_No,
Father_Name,
Gender,
DOB,
Course,
Branch,
Semester,
Academic_Year,
Updated_On from StudentDetail join coursemaster ON coursemaster.Id = studentdetail.Course_Id join coursebranchmaster ON coursebranchmaster.Id = studentdetail.Branch_Id order by Updated_On desc) as Admissionbasicinfo limit :limit; ]]>
</entry>

<entry key="getStudentDtlByFileNo">
    <![CDATA[
Select
File_No,
Enroll_No,
Uni_Enroll_No,
Photo,
First_Name,
Last_Name,
Father_Name,
Mother_Name,
Gender,
DOB,
Blood_Group,
Father_Occupation,
FixedLine_No,
Self_Mobile_No,
Parent_Mobile_No,
Gaurdian_Mobile_No,
Email_Id,
Gaurdian_Email_Id,
Hostel,
Transportation,
Academic_Year,
Semester,
Management_Approval,
Fee_Paid,
Category_Id,
Course_Id,
Branch_Id,
Created_By,
Created_On,
Updated_By,
Updated_On,   
Domicile_State_Id,
Scholarship,
Remarks,
Admission_Mode,
Referred_By,
Quota_Code
from StudentDetail where File_No=:File_No;    
    ]]>

	</entry>

<entry key="addStudentDtl">
    <![CDATA[
      
Insert into StudentDetail
(File_No,
Enroll_No,
Uni_Enroll_No,
Photo,
First_Name,
Last_Name,
Father_Name,
Mother_Name,
Gender,
DOB,
Blood_Group,
Father_Occupation,
FixedLine_No,
Self_Mobile_No,
Parent_Mobile_No,
Gaurdian_Mobile_No,
Email_Id,
Gaurdian_Email_Id,
Hostel,
Transportation,
Academic_Year,
Semester,
Management_Approval,
Fee_Paid,
Category_Id,
Course_Id,
Branch_Id,
Created_By,
Created_On,
Updated_By,
Updated_On,
Domicile_State_Id,
Scholarship,
Remarks,
Admission_Mode,
Referred_By,
Quota_Code
) values
    
 (:File_No,
 :Enroll_No,
:Uni_Enroll_No,
:Photo,
:First_Name,
:Last_Name,
:Father_Name,
:Mother_Name,
:Gender,
:DOB,
:Blood_Group,
:Father_Occupation,
:FixedLine_No,
:Self_Mobile_No,
:Parent_Mobile_No,
:Gaurdian_Mobile_No,
:Email_Id,
:Gaurdian_Email_Id,
:Hostel,
:Transportation,
:Academic_Year,
:Semester,
:Management_Approval,
:Fee_Paid,
:Category_Id,
:Course_Id,
:Branch_Id,
:Created_By,
:Created_On,
:Updated_By,
:Updated_On,
:Domicile_State_Id,
:Scholarship,
:Remarks,
:Admission_Mode,
:Referred_By,
:Quota_Code
);
       
    ]]>

</entry>

<entry key="updateStudentDtl">
    <![CDATA[
      
Update StudentDetail set
Enroll_No = :Enroll_No,
Uni_Enroll_No = :Uni_Enroll_No,
Photo = :Photo,
First_Name = :First_Name,
Last_Name = :Last_Name,
Father_Name = :Father_Name,
Mother_Name = :Mother_Name,
Gender = :Gender,
DOB = :DOB,
Blood_Group = :Blood_Group,
Father_Occupation = :Father_Occupation,
FixedLine_No = :FixedLine_No,
Self_Mobile_No = :Self_Mobile_No,
Parent_Mobile_No = :Parent_Mobile_No,
Gaurdian_Mobile_No = :Gaurdian_Mobile_No,
Email_Id = :Email_Id,
Gaurdian_Email_Id = :Gaurdian_Email_Id,
Hostel = :Hostel,
Transportation = :Transportation,
Academic_Year = :Academic_Year,
Semester = :Semester,
Management_Approval = :Management_Approval,
Fee_Paid = :Fee_Paid,
Category_Id = :Category_Id,
Course_Id = :Course_Id,
Branch_Id = :Branch_Id,
Created_By = :Created_By,
Created_On = :Created_On,
Updated_By = :Updated_By,
Updated_On = :Updated_On,
Domicile_State_Id = :Domicile_State_Id,
Scholarship = :Scholarship,
Remarks = :Remarks,
Admission_Mode = :Admission_Mode,
Referred_By = :Referred_By,
Quota_Code = :Quota_Code
  
 where File_No=:File_No;  
    ]]>

</entry>

<entry key="deleteStudentDtl">
    <![CDATA[
      
Delete from StudentDetail where File_No=:File_No; 
    ]]>

</entry>

<entry key="getAcademicDtlByFileNo">
    <![CDATA[
Select 
University,
College_Name,
Passing_Year,
Percentage,
Roll_No,
File_No,
Qualification_Id    
from  AcademicDetail where File_No=:File_No;    
    
    ]]>

</entry>

<entry key="upsertAcademicDtl">
    <![CDATA[
      
Insert into AcademicDetail
(File_No,
Qualification_Id,
University,
College_Name,
Passing_Year,
Percentage,
Roll_No) values
    
    
(:File_No,
:Qualification_Id,
:University,
:College_Name,
:Passing_Year,
:Percentage,
:Roll_No)
on duplicate key update
 
 File_No=:File_No,
 Qualification_Id=:Qualification_Id,
 University=:University, 
 College_Name=:College_Name, 
 Passing_Year=Passing_Year, 
 Percentage=:Percentage, 
 Roll_No=:Roll_No;
 
    ]]>

</entry>

	
<entry key="deleteAcademicDtl">
    <![CDATA[
      
Delete from AcademicDetail where File_No=:File_No and Qualification_Id not in (:Qualification_Id);  
    ]]>

</entry>

<entry key="getAddressDtlByFileNo">
    <![CDATA[
      
Select
House_No,
Locality,
Landmark,
District,
City,
Pincode,
File_No,
Address_Type,
State_Id
from AddressDetail where File_No=:File_No;    
    ]]>

</entry>

<entry key="upsertAddressDtl">
    <![CDATA[
      
Insert into AddressDetail
(File_No,
Address_Type,
House_No, 
Locality, 
Landmark, 
District, 
City, 
Pincode,
State_Id) values    
(:File_No,
:Address_Type,
:House_No,
:Locality,
:Landmark,
:District,
:City,
:Pincode,
:State_Id)
on duplicate key update
File_No=:File_No,
Address_Type=:Address_Type,
House_No=:House_No, 
Locality=:Locality, 
Landmark=:Landmark, 
District=:District, 
City=:City, 
Pincode=:Pincode,
State_Id=:State_Id
   
    ]]>

</entry>

<entry key="deleteAddressDtl">
    <![CDATA[
      
Delete from AddressDetail where File_No=:File_No and Address_Type not in(:Address_Type);  
    ]]>

</entry>

<entry key="getAdmissionDisDtlByFileNo">
    <![CDATA[
      
Select  
File_No,
FeeHead_Id,
Amount,
Percent,
Discount_Type
    
from  AdmissionDiscountDtl where File_No=:File_No;    
    ]]>

</entry>

<entry key="upsertAdmissionDisDtl">
    <![CDATA[
      
Insert into AdmissionDiscountDtl
(File_No,
FeeHead_Id,
Amount,
Percent,
Discount_Type) values 
(:File_No,
:FeeHead_Id,
:Amount,
:Percent,
:Discount_Type)
on duplicate key update
File_No=:File_No,
FeeHead_Id=:FeeHead_Id,
Amount=:Amount,
Percent=:Percent,
Discount_Type=:Discount_Type 
    
    ]]>

</entry>

<entry key="deleteAdmissionDisDtl">
    <![CDATA[
      
Delete from AdmissionDiscountDtl where File_No=:File_No and FeeHead_Id not in (:FeeHead_Id);  
    ]]>

</entry>

<entry key="getQualificationSubjectDtlByFileNo">
    <![CDATA[
 
Select      
	Subject_Id, 
	File_No, 
	Qualification_Id, 
	Marks_Obtained, 
	Max_Marks  
    
from QualificationSubjectDtl where File_No=:File_No; 
    ]]>

</entry>

<entry key="upsertQualificationSubjectDtl">
    <![CDATA[
      
Insert into QualificationSubjectDtl
    (Subject_Id, 
	File_No, 
    Qualification_Id, 
	Marks_Obtained, 
	Max_Marks) values 
   
   (:Subject_Id, 
	:File_No, 
   :Qualification_Id, 
	:Marks_Obtained, 
	:Max_Marks)
	
	on duplicate key update
	
	Subject_Id=:Subject_Id, 
	File_No=:File_No,
	Qualification_Id=:Qualification_Id, 
	Marks_Obtained=:Marks_Obtained, 
	Max_Marks=:Max_Marks; 
    
    ]]>

</entry>

	
<entry key="deleteQualificationSubjectDtl">
    <![CDATA[
      
Delete from QualificationSubjectDtl where File_No=:File_No and Subject_Id not in (:Subject_Id); 
    ]]>

</entry>

<entry key="getBranchPreferenceByFileNo">
    <![CDATA[
      
Select
	Branch_Preference_Id,
	File_No,
	Branch_Id 
	
	from BranchPreference where File_No=:File_No;
    ]]>

</entry>

<entry key="upsertBranchPreference">
    <![CDATA[
      
      Insert into BranchPreference
	(Branch_Preference_Id,
	File_No,
	Branch_Id) values
	 
	 (:Branch_Preference_Id,
	:File_No,
	:Branch_Id)
	
	on duplicate key update 
    
    Branch_Preference_Id=:Branch_Preference_Id,
	File_No=:File_No,
	Branch_Id=:Branch_Id;
	
    ]]>

</entry>

	
<entry key="deleteBranchPreference">
    <![CDATA[
      
      Delete from BranchPreference where File_No=:File_No and Branch_Preference_Id not in (:Branch_Preference_Id); 
	 
	     ]]>
</entry>
	
<entry key="getcounsellingDetailByFileNo">
    <![CDATA[
select 
      
      File_No, 
      Counselling_Id, 
      Roll_No, 
      Rank, 
      Category_Rank, 
      Percentile
      
from counsellingDetail where File_No=:File_No;
    ]]>

</entry>
	
<entry key="upsertCounsellingDetail">
    <![CDATA[
insert into counsellingDetail
      
      (File_No, 
      Counselling_Id, 
      Roll_No, 
      Rank, 
      Category_Rank, 
      Percentile) values
      
      (:File_No, 
       :Counselling_Id, 
       :Roll_No, 
       :Rank, 
       :Category_Rank, 
       :Percentile)
       
       on duplicate key update
       
       File_No=:File_No, 
       Counselling_Id=:Counselling_Id, 
       Roll_No=:Roll_No, 
       Rank=:Rank, 
       Category_Rank=:Category_Rank, 
       Percentile=:Percentile;
       
    ]]>

</entry>
	
<entry key="deleteCounsellingDetail">
    <![CDATA[
delete from counsellingDetail where File_No=:File_No and Counselling_Id not in (:Counselling_Id);
    ]]>

</entry>
	
</properties>
